// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using SolarMonitor.Data.Repositories.MySql;
using System;

namespace SolarMonitor.Data.Repositories.MySql.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("SolarMonitor.Data.Models.AuthToken", b =>
                {
                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Expiry");

                    b.Property<int>("UserId");

                    b.HasKey("Guid");

                    b.HasIndex("UserId");

                    b.ToTable("AuthTokens");
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("DetailedSpecs");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(45);

                    b.Property<string>("Model")
                        .HasMaxLength(45);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<int>("SiteId");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("TypeId");

                    b.ToTable("Devices");

                    b.HasDiscriminator<int>("TypeId").HasValue(0);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.DeviceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(45);

                    b.HasKey("Id");

                    b.ToTable("DeviceTypes");
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.LoadType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Type")
                        .HasMaxLength(2);

                    b.Property<float>("Voltage_V");

                    b.HasKey("Id");

                    b.ToTable("LoadTypes");
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.Measurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<int>("SensorId");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("DATETIME");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("Measurements");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Measurement");
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.RoleAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("RoleAssignments");
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("DetailedSpecs");

                    b.Property<Guid?>("Device");

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(45);

                    b.Property<string>("Model")
                        .HasMaxLength(45);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<int>("SiteId");

                    b.Property<int>("TypeId");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("TypeId");

                    b.ToTable("Sensors");

                    b.HasDiscriminator<int>("TypeId").HasValue(0);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.SensorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(45);

                    b.HasKey("Id");

                    b.ToTable("SensorTypes");
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid>("Guid")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.Property<string>("Timezone")
                        .HasMaxLength(10);

                    b.HasKey("Id");

                    b.ToTable("Sites");
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .HasMaxLength(45);

                    b.Property<string>("Password");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(45);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.BatteryBank", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Device");

                    b.Property<float?>("BankVoltage_V");

                    b.Property<float?>("BatteryVoltage_V");

                    b.Property<float?>("CapacityPerBattery_Ah");

                    b.Property<string>("Configuration")
                        .HasMaxLength(5);

                    b.Property<int?>("NumBatteries");

                    b.Property<float?>("TotalCapacity_Ah");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("BatteryBanks");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.ChargeController", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Device");

                    b.Property<float?>("CurrentRating_A");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("ChargeControllers");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.Inverter", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Device");

                    b.Property<float?>("InputVoltage_V");

                    b.Property<float?>("MaxContinuousPower_W");

                    b.Property<float?>("MaxSurgePower_W");

                    b.Property<float?>("OutputVoltage_V");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("Inverters");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.SolarArray", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Device");

                    b.Property<string>("Configuration")
                        .HasColumnName("SolarArray_Configuration")
                        .HasMaxLength(5);

                    b.Property<int?>("NumPanels");

                    b.Property<int?>("PanelMaxPower_W");

                    b.Property<float?>("PanelOpenCircuitVoltage_V");

                    b.Property<float?>("PanelShortCircuitCurrent_A");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("SolarArrays");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.WeatherStation", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Device");


                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("WeatherStations");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.BarometricPressureMeasurement", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Measurement");

                    b.Property<float>("BarometricPressure_mBar");

                    b.HasIndex("Timestamp");

                    b.ToTable("BarometricPressureMeasurements");

                    b.HasDiscriminator().HasValue("BarometricPressureMeasurement");
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.BatteryChargeStageMeasurement", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Measurement");

                    b.Property<string>("ChargeStage");

                    b.HasIndex("Timestamp");

                    b.ToTable("BatteryChargeStageMeasurements");

                    b.HasDiscriminator().HasValue("BatteryChargeStageMeasurement");
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.BatterySocMeasurement", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Measurement");

                    b.Property<int>("SOC");

                    b.HasIndex("Timestamp");

                    b.ToTable("BatterySocMeasurements");

                    b.HasDiscriminator().HasValue("BatterySocMeasurement");
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.BatteryStatsMeasurement", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Measurement");

                    b.Property<float>("MaxVoltage");

                    b.Property<float>("MinVoltage");

                    b.HasIndex("Timestamp");

                    b.ToTable("BatteryStatsMeasurements");

                    b.HasDiscriminator().HasValue("BatteryStatsMeasurement");
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.ChargeControllerLoadOutputMeasurement", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Measurement");

                    b.Property<bool>("On");

                    b.HasIndex("Timestamp");

                    b.ToTable("ChargeControllerLoadOutputMeasurements");

                    b.HasDiscriminator().HasValue("ChargeControllerLoadOutputMeasurement");
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.CurrentSensorMeasurement", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Measurement");

                    b.Property<float>("Current_A");

                    b.Property<int>("Interval_s");

                    b.HasIndex("Timestamp");

                    b.ToTable("CurrentSensorMeasurements");

                    b.HasDiscriminator().HasValue("CurrentSensorMeasurement");
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.EnergyStatsMeasurement", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Measurement");

                    b.Property<float>("AnnualEnergy_kWh");

                    b.Property<float>("DailyEnergy_kWh");

                    b.Property<float>("MonthlyEnergy_kWh");

                    b.Property<float>("TotalEnergy_kWh");

                    b.HasIndex("Timestamp");

                    b.ToTable("EnergyStatsMeasurements");

                    b.HasDiscriminator().HasValue("EnergyStatsMeasurement");
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.HumidityMeasurement", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Measurement");

                    b.Property<float>("RelativeHumidity");

                    b.HasIndex("Timestamp");

                    b.ToTable("HumidityMeasurements");

                    b.HasDiscriminator().HasValue("HumidityMeasurement");
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.ShuntMeasurement", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Measurement");

                    b.Property<float>("Current_A")
                        .HasColumnName("ShuntMeasurement_Current_A");

                    b.Property<float>("Voltage_v");

                    b.HasIndex("Timestamp");

                    b.ToTable("ShuntMeasurements");

                    b.HasDiscriminator().HasValue("ShuntMeasurement");
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.TemperatureMeasurement", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Measurement");

                    b.Property<float>("Temperature_C");

                    b.HasIndex("Timestamp");

                    b.ToTable("TemperatureMeasurements");

                    b.HasDiscriminator().HasValue("TemperatureMeasurement");
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.WindMeasurement", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Measurement");

                    b.Property<float>("WindDirection_degFromN");

                    b.Property<float>("WindSpeed_mps");

                    b.HasIndex("Timestamp");

                    b.ToTable("WindMeasurements");

                    b.HasDiscriminator().HasValue("WindMeasurement");
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.BarometricPressureSensor", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Sensor");


                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("BarometricPressureSensors");

                    b.HasDiscriminator().HasValue(10);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.BatteryChargeStageSensor", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Sensor");


                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("BatteryChargeStageSensors");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.BatterySocSensor", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Sensor");


                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("BatterySocSensors");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.BatteryStatsSensor", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Sensor");


                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("BatteryStatsSensors");

                    b.HasDiscriminator().HasValue(6);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.ChargeControllerLoadOutput", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Sensor");


                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("ChargeControllerLoadOutputs");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.CurrentSensor", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Sensor");

                    b.Property<int?>("LoadTypeId");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.HasIndex("LoadTypeId");

                    b.ToTable("CurrentSensors");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.EnergyStatsSensor", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Sensor");


                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("EnergyStatsSensors");

                    b.HasDiscriminator().HasValue(7);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.HumiditySensor", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Sensor");


                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("HumiditySensors");

                    b.HasDiscriminator().HasValue(9);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.Shunt", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Sensor");

                    b.Property<float?>("InternalResistor_mOhm");

                    b.Property<float?>("InternalVoltage_mV");

                    b.Property<float?>("MaxCurrent_A");

                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("Shunts");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.TemperatureSensor", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Sensor");


                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("TemperatureSensors");

                    b.HasDiscriminator().HasValue(8);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.WindSensor", b =>
                {
                    b.HasBaseType("SolarMonitor.Data.Models.Sensor");


                    b.HasIndex("Guid")
                        .IsUnique();

                    b.ToTable("WindSensors");

                    b.HasDiscriminator().HasValue(11);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.AuthToken", b =>
                {
                    b.HasOne("SolarMonitor.Data.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.Device", b =>
                {
                    b.HasOne("SolarMonitor.Data.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolarMonitor.Data.Models.DeviceType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.Measurement", b =>
                {
                    b.HasOne("SolarMonitor.Data.Models.Sensor", "Sensor")
                        .WithMany()
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.RoleAssignment", b =>
                {
                    b.HasOne("SolarMonitor.Data.Models.Role", "Role")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolarMonitor.Data.Models.User", "User")
                        .WithMany("RoleAssignments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.Sensor", b =>
                {
                    b.HasOne("SolarMonitor.Data.Models.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SolarMonitor.Data.Models.SensorType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SolarMonitor.Data.Models.CurrentSensor", b =>
                {
                    b.HasOne("SolarMonitor.Data.Models.LoadType", "LoadType")
                        .WithMany()
                        .HasForeignKey("LoadTypeId");
                });
#pragma warning restore 612, 618
        }
    }
}
